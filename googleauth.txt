import {GoogleOAuthProvider} from '@react-oauth/google';

After that wrap your entire application with "<GoogleOAuthProvider>"
it would take in the following props:
    clientId=""

To create your google credentials, you can go to console.cloud.google.com
create a new project, select the project, open the sidebar, go to API and services, then go to credentials.
configure your oauth consent screen, choose external, click create, enter app name and email, and fill in developers contact info, click save and continue. scopes coould be empty, click save and continue, including for test users. 
in the dashboard, click on credentials, create credentials, choose oauthclientid, app type would be webapp, name would be name of the app, then important step:
add javascript origins(would be http://localhost:3000).
also add them as the authorized redirect urls,then click create. Then copy it.

You can add it as an environment variable in .env file.
In the .env file, you can do stuff like:
GOOGLE_API_TOKEN = <clientId>


Where necessary, you would import {GoogleLogin, googleLogout} from @react-oauth/google;


When using sanity, you create your backend first and make your schemas.
Then you go to your frontend and install "@sanity/client". Do this with the npm package manager.

Now you make a client.js file with the following configurations:

import { createClient } from "@sanity/client";
import imageUrlBuilder from "@sanity/image-url";

export const client = createClient({
  projectId: "ur project ID which could be in a dotenv file",
  dataset: "production",
  apiVersion: "2023-12-03",
  useCdn: true,
  token: "Your token which you should go to sanity manage and get a token, you can also put this in a dotenv file.",
});


//Below is for image.
const builder = imageUrlBuilder(client);
export const urlFor = (source) => {
  builder.image(source);
};

You then import "client" in the necessary file and use it where it needs to be. You can now use all the methods associated with it. Eg, is client.createIfNotExist, client.fetch, etc. Note that these are all promises, meaning that you can tackle on a .then method after it is done resolving.







